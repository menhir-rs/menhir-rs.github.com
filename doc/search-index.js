var searchIndex = {};
searchIndex["menhir"] = {"doc":"The Menhir LR(1) parser generator","items":[[4,"MenhirOption","menhir","An option (flag) to be passed to the Menhir generator",null,null],[13,"Base","","The base path (without the `.rs` extension) of the output file",0,null],[13,"Canonical","","Construct a canonical Knuth LR(1) automaton",0,null],[13,"CompileErrors","","Compile a `.messages` error file to Rust code",0,null],[13,"Dump","","Describe the automaton in `<basename>.automaton`",0,null],[13,"Explain","","Explain conflicts in `<basename>.conflicts`",0,null],[13,"Graph","","Write grammar's dependency graph to `<basename>.dot`",0,null],[13,"Lalr","","Construct an LALR(1) automaton",0,null],[13,"LogAutomaton","","Log information about the automaton",0,null],[13,"LogCode","","Log information about the generated code",0,null],[13,"LogGrammar","","Log information about the grammar",0,null],[13,"NoInline","","Ignore the `%inline` keyword",0,null],[13,"NoStdlib","","Do not load the standard library",0,null],[13,"OnlyPreprocess","","Only process the given stages and exit ; see [`OnlyPreprocessOption`] [`OnlyPreprocessOption`]: enum.OnlyPreprocessOption.html",0,null],[13,"Stdlib","","Specify where the standard library lies",0,null],[13,"Strict","","Warnings about the grammar are errors",0,null],[13,"Suggest","","Suggest where various files are located ; see [`SuggestOption`] [`SuggestOption`]: enum.SuggestOption.html",0,null],[13,"Timings","","Display internal timings",0,null],[13,"UnusedToken","","Do not warn that the given token is unused",0,null],[13,"UnusedTokens","","Do not warn about any unused token",0,null],[13,"Version","","Show version number and exit",0,null],[13,"Verbose","","Synonymous with `Dump` and `Explain`",0,null],[4,"OnlyPreprocessOption","","Argument to the [`OnlyPreprocess`] flag [`OnlyPreprocess`]: enum.MenhirOption.html",null,null],[13,"Grammar","","Print grammar and exit",1,null],[13,"Actions","","Print grammar with unit actions and exit",1,null],[13,"Tokens","","Print grammar with unit actions & tokens and exit",1,null],[4,"SuggestOption","","Argument to the [`Suggest`] flag [`Suggest`]: enum.MenhirOption.html",null,null],[13,"MenhirLib","","Suggest where is `MenhirLib`. This is where the [`menhir_runtime`] crate is located. [`menhir_runtime`]: /doc/menhir_runtime/",2,null],[5,"add_option","","Add a `MenhirOption` to a Menhir command",null,{"inputs":[{"name":"command"},{"name":"menhiroption"}],"output":{"name":"command"}}],[5,"run","","Run Menhir with the given options and the given grammar file",null,null],[5,"process_file","","Convenience function over `run` that just compiles the grammar with the default options",null,null],[5,"compile_errors","","Convenience function over `run` to compiles error files",null,null],[5,"link_binary","","Links the Menhir binary to the `MANIFEST` directory of the calling crate",null,{"inputs":[],"output":{"name":"result"}}],[5,"cargo_rustc_flags","","Instructs Cargo where to find the menhir_runtime",null,{"inputs":[],"output":{"name":"result"}}],[17,"MENHIR_BINARY","","The location of the Menhir binary",null,null]],"paths":[[4,"MenhirOption"],[4,"OnlyPreprocessOption"],[4,"SuggestOption"]]};
initSearch(searchIndex);
